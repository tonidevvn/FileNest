services:
  minio1:
    image: minio/minio
    container_name: asia-minio
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: minioadmin
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SITE_NAME: asia-site
      MINIO_SITE_REGION: asia
      MINIO_LOGGER_WEBHOOK_ENABLE: on
      MINIO_LOGGER_WEBHOOK_ENDPOINT: http://fluent-bit:24224
    volumes:
      - minio1:/data
    command: server --console-address ":9090" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - minio-network

  minio2:
    image: minio/minio
    container_name: america-minio
    ports:
      - "9001:9000"
      - "9091:9090"
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: minioadmin
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_SITE_NAME: america-site
      MINIO_SITE_REGION: us-east
      MINIO_LOGGER_WEBHOOK_ENABLE: on
      MINIO_LOGGER_WEBHOOK_ENDPOINT: http://fluent-bit:24224
    volumes:
      - minio2:/data
    command: server --console-address ":9090" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - minio-network

  setup-replication:
    image: minio/mc
    container_name: setup-replication
    depends_on:
      minio1:
        condition: service_healthy
      minio2:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO instances to be fully ready...' &&
      sleep 15 &&
      mc alias set minio1 http://minio1:9000 admin minioadmin &&
      mc alias set minio2 http://minio2:9000 admin minioadmin &&
      echo 'Setting up site replication...' &&
      mc admin replicate add minio1 minio2 &&
      echo 'Creating test bucket...' &&
      mc mb minio1/bucket
      "
    networks:
      - minio-network
    restart: "no"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -s http://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo healthy; else echo unhealthy; exit 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - minio-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - minio-network

  fluent-bit:
    image: fluent/fluent-bit:latest
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
    depends_on:
      - elasticsearch
    healthcheck:
      test: [ "CMD", "fluent-bit", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - minio-network

networks:
  minio-network:
    driver: bridge

volumes:
  minio1:
    driver: local
  minio2:
    driver: local
  esdata1:
    driver: local
